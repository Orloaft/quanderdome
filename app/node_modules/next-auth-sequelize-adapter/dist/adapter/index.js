"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("core-js/stable");

require("regenerator-runtime/runtime");

var _crypto = require("crypto");

var _errors = require("./lib/errors");

var _logger = _interopRequireDefault(require("./lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Adapter = function Adapter(config) {
  var models = config.models;

  function getCompoundId(providerId, providerAccountId) {
    return (0, _crypto.createHash)('sha256').update("".concat(providerId, ":").concat(providerAccountId)).digest('hex');
  }

  function getAdapter(_x) {
    return _getAdapter.apply(this, arguments);
  }

  function _getAdapter() {
    _getAdapter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(appOptions) {
      var debug, defaultSessionMaxAge, sessionMaxAge, sessionUpdateAge, createUser, _createUser, getUser, _getUser, getUserByEmail, _getUserByEmail, getUserByProviderAccountId, _getUserByProviderAccountId, updateUser, _updateUser, deleteUser, _deleteUser, linkAccount, _linkAccount, unlinkAccount, _unlinkAccount, createSession, _createSession, getSession, _getSession, updateSession, _updateSession, deleteSession, _deleteSession, createVerificationRequest, _createVerificationRequest, getVerificationRequest, _getVerificationRequest, deleteVerificationRequest, _deleteVerificationRequest;

      return regeneratorRuntime.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _deleteVerificationRequest = function _deleteVerificationRe2() {
                _deleteVerificationRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(identifier, token, secret, provider) {
                  var hashedToken;
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          debug('DELETE_VERIFICATION', identifier, token);
                          _context15.prev = 1;
                          // Delete verification entry so it cannot be used again
                          hashedToken = (0, _crypto.createHash)('sha256').update("".concat(token).concat(secret)).digest('hex');
                          _context15.next = 5;
                          return models.VerificationRequest.destroy({
                            where: {
                              token: hashedToken
                            }
                          });

                        case 5:
                          _context15.next = 11;
                          break;

                        case 7:
                          _context15.prev = 7;
                          _context15.t0 = _context15["catch"](1);

                          _logger["default"].error('DELETE_VERIFICATION_REQUEST_ERROR', _context15.t0);

                          return _context15.abrupt("return", Promise.reject(new Error('DELETE_VERIFICATION_REQUEST_ERROR', _context15.t0)));

                        case 11:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15, null, [[1, 7]]);
                }));
                return _deleteVerificationRequest.apply(this, arguments);
              };

              deleteVerificationRequest = function _deleteVerificationRe(_x33, _x34, _x35, _x36) {
                return _deleteVerificationRequest.apply(this, arguments);
              };

              _getVerificationRequest = function _getVerificationReque2() {
                _getVerificationRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(identifier, token, secret, provider) {
                  var hashedToken, verificationRequest;
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          debug('GET_VERIFICATION_REQUEST', identifier, token);
                          _context14.prev = 1;
                          // Hash token provided with secret before trying to match it with database
                          // @TODO Use bcrypt instead of salted SHA-256 hash for token
                          hashedToken = (0, _crypto.createHash)('sha256').update("".concat(token).concat(secret)).digest('hex');
                          _context14.next = 5;
                          return models.VerificationRequest.findOne({
                            where: {
                              token: hashedToken
                            }
                          });

                        case 5:
                          verificationRequest = _context14.sent;

                          if (!(verificationRequest && verificationRequest.expires && new Date() > verificationRequest.expires)) {
                            _context14.next = 10;
                            break;
                          }

                          _context14.next = 9;
                          return models.VerificationRequest.destroy({
                            where: {
                              token: hashedToken
                            }
                          });

                        case 9:
                          return _context14.abrupt("return", null);

                        case 10:
                          return _context14.abrupt("return", verificationRequest);

                        case 13:
                          _context14.prev = 13;
                          _context14.t0 = _context14["catch"](1);

                          _logger["default"].error('GET_VERIFICATION_REQUEST_ERROR', _context14.t0);

                          return _context14.abrupt("return", Promise.reject(new Error('GET_VERIFICATION_REQUEST_ERROR', _context14.t0)));

                        case 17:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14, null, [[1, 13]]);
                }));
                return _getVerificationRequest.apply(this, arguments);
              };

              getVerificationRequest = function _getVerificationReque(_x29, _x30, _x31, _x32) {
                return _getVerificationRequest.apply(this, arguments);
              };

              _createVerificationRequest = function _createVerificationRe2() {
                _createVerificationRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(identifier, url, token, secret, provider) {
                  var baseUrl, sendVerificationRequest, maxAge, hashedToken, expires, dateExpires, verificationRequest;
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          debug('CREATE_VERIFICATION_REQUEST', identifier);
                          _context13.prev = 1;
                          baseUrl = appOptions.baseUrl;
                          sendVerificationRequest = provider.sendVerificationRequest, maxAge = provider.maxAge; // Store hashed token (using secret as salt) so that tokens cannot be exploited
                          // even if the contents of the database is compromised.
                          // @TODO Use bcrypt function here instead of simple salted hash

                          hashedToken = (0, _crypto.createHash)('sha256').update("".concat(token).concat(secret)).digest('hex');
                          expires = null;

                          if (maxAge) {
                            dateExpires = new Date();
                            dateExpires.setTime(dateExpires.getTime() + maxAge * 1000);
                            expires = dateExpires.toISOString();
                          } // Save to database


                          _context13.next = 9;
                          return models.VerificationRequest.create({
                            identifier: identifier,
                            token: hashedToken,
                            expires: expires
                          });

                        case 9:
                          verificationRequest = _context13.sent;
                          _context13.next = 12;
                          return sendVerificationRequest({
                            identifier: identifier,
                            url: url,
                            token: token,
                            baseUrl: baseUrl,
                            provider: provider
                          });

                        case 12:
                          return _context13.abrupt("return", verificationRequest);

                        case 15:
                          _context13.prev = 15;
                          _context13.t0 = _context13["catch"](1);

                          _logger["default"].error('CREATE_VERIFICATION_REQUEST_ERROR', _context13.t0);

                          return _context13.abrupt("return", Promise.reject(new Error('CREATE_VERIFICATION_REQUEST_ERROR', _context13.t0)));

                        case 19:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13, null, [[1, 15]]);
                }));
                return _createVerificationRequest.apply(this, arguments);
              };

              createVerificationRequest = function _createVerificationRe(_x24, _x25, _x26, _x27, _x28) {
                return _createVerificationRequest.apply(this, arguments);
              };

              _deleteSession = function _deleteSession3() {
                _deleteSession = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(sessionToken) {
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          debug('DELETE_SESSION', sessionToken);
                          _context12.prev = 1;
                          return _context12.abrupt("return", models.Session.destroy({
                            where: {
                              sessionToken: sessionToken
                            }
                          }));

                        case 5:
                          _context12.prev = 5;
                          _context12.t0 = _context12["catch"](1);

                          _logger["default"].error('DELETE_SESSION_ERROR', _context12.t0);

                          return _context12.abrupt("return", Promise.reject(new Error('DELETE_SESSION_ERROR', _context12.t0)));

                        case 9:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12, null, [[1, 5]]);
                }));
                return _deleteSession.apply(this, arguments);
              };

              deleteSession = function _deleteSession2(_x23) {
                return _deleteSession.apply(this, arguments);
              };

              _updateSession = function _updateSession3() {
                _updateSession = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(session, force) {
                  var dateSessionIsDueToBeUpdated, newExpiryDate, id, expires;
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          debug('UPDATE_SESSION', session);
                          _context11.prev = 1;

                          if (!(sessionMaxAge && (sessionUpdateAge || sessionUpdateAge === 0) && session.expires)) {
                            _context11.next = 16;
                            break;
                          }

                          // Calculate last updated date, to throttle write updates to database
                          // Formula: ({expiry date} - sessionMaxAge) + sessionUpdateAge
                          //     e.g. ({expiry date} - 30 days) + 1 hour
                          //
                          // Default for sessionMaxAge is 30 days.
                          // Default for sessionUpdateAge is 1 hour.
                          dateSessionIsDueToBeUpdated = new Date(session.expires);
                          dateSessionIsDueToBeUpdated.setTime(dateSessionIsDueToBeUpdated.getTime() - sessionMaxAge);
                          dateSessionIsDueToBeUpdated.setTime(dateSessionIsDueToBeUpdated.getTime() + sessionUpdateAge); // Trigger update of session expiry date and write to database, only
                          // if the session was last updated more than {sessionUpdateAge} ago

                          if (!(new Date() > dateSessionIsDueToBeUpdated)) {
                            _context11.next = 12;
                            break;
                          }

                          newExpiryDate = new Date();
                          newExpiryDate.setTime(newExpiryDate.getTime() + sessionMaxAge);
                          session.expires = newExpiryDate;
                          _context11.next = 14;
                          break;

                        case 12:
                          if (force) {
                            _context11.next = 14;
                            break;
                          }

                          return _context11.abrupt("return", null);

                        case 14:
                          _context11.next = 18;
                          break;

                        case 16:
                          if (force) {
                            _context11.next = 18;
                            break;
                          }

                          return _context11.abrupt("return", null);

                        case 18:
                          id = session.id, expires = session.expires;
                          return _context11.abrupt("return", models.Session.update({
                            expires: expires.toISOString()
                          }, {
                            where: {
                              id: id
                            }
                          }));

                        case 22:
                          _context11.prev = 22;
                          _context11.t0 = _context11["catch"](1);

                          _logger["default"].error('UPDATE_SESSION_ERROR', _context11.t0);

                          return _context11.abrupt("return", Promise.reject(new Error('UPDATE_SESSION_ERROR', _context11.t0)));

                        case 26:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11, null, [[1, 22]]);
                }));
                return _updateSession.apply(this, arguments);
              };

              updateSession = function _updateSession2(_x21, _x22) {
                return _updateSession.apply(this, arguments);
              };

              _getSession = function _getSession3() {
                _getSession = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(sessionToken) {
                  var session;
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          debug('GET_SESSION', sessionToken);
                          _context10.prev = 1;
                          _context10.next = 4;
                          return models.Session.findOne({
                            where: {
                              sessionToken: sessionToken
                            }
                          });

                        case 4:
                          session = _context10.sent;

                          if (!(session && session.expires && new Date() > session.expires)) {
                            _context10.next = 9;
                            break;
                          }

                          _context10.next = 8;
                          return models.Session.destroy({
                            where: {
                              sessionToken: sessionToken
                            }
                          });

                        case 8:
                          return _context10.abrupt("return", null);

                        case 9:
                          return _context10.abrupt("return", session);

                        case 12:
                          _context10.prev = 12;
                          _context10.t0 = _context10["catch"](1);

                          _logger["default"].error('GET_SESSION_ERROR', _context10.t0);

                          return _context10.abrupt("return", Promise.reject(new Error('GET_SESSION_ERROR', _context10.t0)));

                        case 16:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10, null, [[1, 12]]);
                }));
                return _getSession.apply(this, arguments);
              };

              getSession = function _getSession2(_x20) {
                return _getSession.apply(this, arguments);
              };

              _createSession = function _createSession3() {
                _createSession = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(user) {
                  var expires, dateExpires;
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          debug('CREATE_SESSION', user);
                          _context9.prev = 1;
                          expires = null;

                          if (sessionMaxAge) {
                            dateExpires = new Date();
                            dateExpires.setTime(dateExpires.getTime() + sessionMaxAge);
                            expires = dateExpires.toISOString();
                          }

                          return _context9.abrupt("return", models.Session.create({
                            expires: expires,
                            userId: user.id,
                            sessionToken: (0, _crypto.randomBytes)(32).toString('hex'),
                            accessToken: (0, _crypto.randomBytes)(32).toString('hex')
                          }));

                        case 7:
                          _context9.prev = 7;
                          _context9.t0 = _context9["catch"](1);

                          _logger["default"].error('CREATE_SESSION_ERROR', _context9.t0);

                          return _context9.abrupt("return", Promise.reject(new Error('CREATE_SESSION_ERROR', _context9.t0)));

                        case 11:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9, null, [[1, 7]]);
                }));
                return _createSession.apply(this, arguments);
              };

              createSession = function _createSession2(_x19) {
                return _createSession.apply(this, arguments);
              };

              _unlinkAccount = function _unlinkAccount3() {
                _unlinkAccount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(userId, providerId, providerAccountId) {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          debug('UNLINK_ACCOUNT', userId, providerId, providerAccountId);
                          _context8.prev = 1;
                          return _context8.abrupt("return", models.Account.destroy({
                            where: {
                              compoundId: getCompoundId(providerId, providerAccountId)
                            }
                          }));

                        case 5:
                          _context8.prev = 5;
                          _context8.t0 = _context8["catch"](1);

                          _logger["default"].error('UNLINK_ACCOUNT_ERROR', _context8.t0);

                          return _context8.abrupt("return", Promise.reject(new Error('UNLINK_ACCOUNT_ERROR', _context8.t0)));

                        case 9:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8, null, [[1, 5]]);
                }));
                return _unlinkAccount.apply(this, arguments);
              };

              unlinkAccount = function _unlinkAccount2(_x16, _x17, _x18) {
                return _unlinkAccount.apply(this, arguments);
              };

              _linkAccount = function _linkAccount3() {
                _linkAccount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(userId, providerId, providerType, providerAccountId, refreshToken, accessToken, accessTokenExpires) {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          debug('LINK_ACCOUNT', userId, providerId, providerType, providerAccountId, refreshToken, accessToken, accessTokenExpires);
                          _context7.prev = 1;
                          return _context7.abrupt("return", models.Account.create({
                            accessToken: accessToken,
                            refreshToken: refreshToken,
                            compoundId: getCompoundId(providerId, providerAccountId),
                            providerAccountId: "".concat(providerAccountId),
                            providerId: providerId,
                            providerType: providerType,
                            accessTokenExpires: accessTokenExpires,
                            userId: userId
                          }));

                        case 5:
                          _context7.prev = 5;
                          _context7.t0 = _context7["catch"](1);

                          _logger["default"].error('LINK_ACCOUNT_ERROR', _context7.t0);

                          return _context7.abrupt("return", Promise.reject(new Error('LINK_ACCOUNT_ERROR', _context7.t0)));

                        case 9:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, null, [[1, 5]]);
                }));
                return _linkAccount.apply(this, arguments);
              };

              linkAccount = function _linkAccount2(_x9, _x10, _x11, _x12, _x13, _x14, _x15) {
                return _linkAccount.apply(this, arguments);
              };

              _deleteUser = function _deleteUser3() {
                _deleteUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(userId) {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          debug('DELETE_USER', userId);
                          _context6.prev = 1;
                          return _context6.abrupt("return", models.User.destroy({
                            where: {
                              id: userId
                            }
                          }));

                        case 5:
                          _context6.prev = 5;
                          _context6.t0 = _context6["catch"](1);

                          _logger["default"].error('DELETE_USER_ERROR', _context6.t0);

                          return _context6.abrupt("return", Promise.reject(new Error('DELETE_USER_ERROR', _context6.t0)));

                        case 9:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6, null, [[1, 5]]);
                }));
                return _deleteUser.apply(this, arguments);
              };

              deleteUser = function _deleteUser2(_x8) {
                return _deleteUser.apply(this, arguments);
              };

              _updateUser = function _updateUser3() {
                _updateUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(user) {
                  var id, name, email, image, emailVerified;
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          debug('UPDATE_USER', user);
                          _context5.prev = 1;
                          id = user.id, name = user.name, email = user.email, image = user.image, emailVerified = user.emailVerified;
                          return _context5.abrupt("return", models.User.update({
                            name: name,
                            email: email,
                            image: image
                          }, {
                            where: {
                              id: id
                            }
                          }));

                        case 6:
                          _context5.prev = 6;
                          _context5.t0 = _context5["catch"](1);

                          _logger["default"].error('UPDATE_USER_ERROR', _context5.t0);

                          return _context5.abrupt("return", Promise.reject(new Error('UPDATE_USER_ERROR', _context5.t0)));

                        case 10:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, null, [[1, 6]]);
                }));
                return _updateUser.apply(this, arguments);
              };

              updateUser = function _updateUser2(_x7) {
                return _updateUser.apply(this, arguments);
              };

              _getUserByProviderAccountId = function _getUserByProviderAcc2() {
                _getUserByProviderAccountId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(providerId, providerAccountId) {
                  var account;
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          debug('GET_USER_BY_PROVIDER_ACCOUNT_ID', providerId, providerAccountId);
                          _context4.prev = 1;
                          _context4.next = 4;
                          return models.Account.findOne({
                            where: {
                              compoundId: getCompoundId(providerId, providerAccountId)
                            }
                          });

                        case 4:
                          account = _context4.sent;

                          if (account) {
                            _context4.next = 7;
                            break;
                          }

                          return _context4.abrupt("return", null);

                        case 7:
                          return _context4.abrupt("return", models.User.findOne({
                            where: {
                              id: account.userId
                            }
                          }));

                        case 10:
                          _context4.prev = 10;
                          _context4.t0 = _context4["catch"](1);

                          _logger["default"].error('GET_USER_BY_PROVIDER_ACCOUNT_ID_ERROR', _context4.t0);

                          return _context4.abrupt("return", Promise.reject(new Error('GET_USER_BY_PROVIDER_ACCOUNT_ID_ERROR', _context4.t0)));

                        case 14:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4, null, [[1, 10]]);
                }));
                return _getUserByProviderAccountId.apply(this, arguments);
              };

              getUserByProviderAccountId = function _getUserByProviderAcc(_x5, _x6) {
                return _getUserByProviderAccountId.apply(this, arguments);
              };

              _getUserByEmail = function _getUserByEmail3() {
                _getUserByEmail = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(email) {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          debug('GET_USER_BY_EMAIL', email);
                          _context3.prev = 1;

                          if (email) {
                            _context3.next = 4;
                            break;
                          }

                          return _context3.abrupt("return", Promise.resolve(null));

                        case 4:
                          return _context3.abrupt("return", models.User.findOne({
                            where: {
                              email: email
                            }
                          }));

                        case 7:
                          _context3.prev = 7;
                          _context3.t0 = _context3["catch"](1);

                          _logger["default"].error('GET_USER_BY_EMAIL_ERROR', _context3.t0);

                          return _context3.abrupt("return", Promise.reject(new Error('GET_USER_BY_EMAIL_ERROR', _context3.t0)));

                        case 11:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3, null, [[1, 7]]);
                }));
                return _getUserByEmail.apply(this, arguments);
              };

              getUserByEmail = function _getUserByEmail2(_x4) {
                return _getUserByEmail.apply(this, arguments);
              };

              _getUser = function _getUser3() {
                _getUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          debug('GET_USER', id);
                          _context2.prev = 1;
                          return _context2.abrupt("return", models.User.findOne({
                            where: {
                              id: id
                            }
                          }));

                        case 5:
                          _context2.prev = 5;
                          _context2.t0 = _context2["catch"](1);

                          _logger["default"].error('GET_USER_BY_ID_ERROR', _context2.t0);

                          return _context2.abrupt("return", Promise.reject(new Error('GET_USER_BY_ID_ERROR', _context2.t0)));

                        case 9:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[1, 5]]);
                }));
                return _getUser.apply(this, arguments);
              };

              getUser = function _getUser2(_x3) {
                return _getUser.apply(this, arguments);
              };

              _createUser = function _createUser3() {
                _createUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(profile) {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          debug('CREATE_USER', profile);
                          _context.prev = 1;
                          return _context.abrupt("return", models.User.create({
                            name: profile.name,
                            email: profile.email,
                            image: profile.image,
                            emailVerified: profile.emailVerified ? profile.emailVerified.toISOString() : null
                          }));

                        case 5:
                          _context.prev = 5;
                          _context.t0 = _context["catch"](1);

                          _logger["default"].error('CREATE_USER_ERROR', _context.t0);

                          return _context.abrupt("return", Promise.reject(new _errors.CreateUserError(_context.t0)));

                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[1, 5]]);
                }));
                return _createUser.apply(this, arguments);
              };

              createUser = function _createUser2(_x2) {
                return _createUser.apply(this, arguments);
              };

              debug = function _debug(debugCode) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                _logger["default"].debug.apply(_logger["default"], ["SEQUELIZE".concat(debugCode)].concat(args));
              };

              if (appOptions && (!appOptions.session || !appOptions.session.maxAge)) {
                debug('GET_ADAPTER', 'Session expiry not configured (defaulting to 30 days');
              }

              defaultSessionMaxAge = 30 * 24 * 60 * 60 * 1000;
              sessionMaxAge = appOptions && appOptions.session && appOptions.session.maxAge ? appOptions.session.maxAge * 1000 : defaultSessionMaxAge;
              sessionUpdateAge = appOptions && appOptions.session && appOptions.session.updateAge ? appOptions.session.updateAge * 1000 : 0;
              return _context16.abrupt("return", Promise.resolve({
                createUser: createUser,
                getUser: getUser,
                getUserByEmail: getUserByEmail,
                getUserByProviderAccountId: getUserByProviderAccountId,
                updateUser: updateUser,
                deleteUser: deleteUser,
                linkAccount: linkAccount,
                unlinkAccount: unlinkAccount,
                createSession: createSession,
                getSession: getSession,
                updateSession: updateSession,
                deleteSession: deleteSession,
                createVerificationRequest: createVerificationRequest,
                getVerificationRequest: getVerificationRequest,
                deleteVerificationRequest: deleteVerificationRequest
              }));

            case 36:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));
    return _getAdapter.apply(this, arguments);
  }

  return {
    getAdapter: getAdapter
  };
};

var _default = {
  Adapter: Adapter
};
exports["default"] = _default;